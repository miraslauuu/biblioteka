BEGIN
  FOR cur_rec IN (SELECT object_name, object_type 
                  FROM   user_objects
                  WHERE  object_type IN ('TABLE', 'VIEW', 'PACKAGE', 'PROCEDURE', 'FUNCTION', 'SEQUENCE', 'TRIGGER', 'TYPE')) LOOP
    BEGIN
      IF cur_rec.object_type = 'TABLE' THEN
        IF instr(cur_rec.object_name, 'STORE') = 0 then
          EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '" CASCADE CONSTRAINTS';
        END IF;
      ELSIF cur_rec.object_type = 'TYPE' THEN
        EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '" FORCE';
      ELSE
        EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('FAILED: DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"');
    END;
  END LOOP;
END;
/
CREATE TABLE Wojewodztwa (
    IDwojewodztwa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazwa VARCHAR2(100) UNIQUE
);
/

CREATE TABLE Autorzy (
    IDautora NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAZWISKO VARCHAR2(30),
    IMIE VARCHAR2(30),
    UWAGI VARCHAR2(300)
);
/

CREATE TABLE Kategorie(
    IDkategorii NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    KATEGORIA VARCHAR2(40) UNIQUE
);
/

CREATE TABLE Wykaz_Wydawcow(
    IDwydawcy NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAZWA VARCHAR2(40) UNIQUE
);
/
CREATE TABLE Wykaz_Szafek(
    IDszafki NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    POLOZENIE VARCHAR2(40)
);
/
CREATE TABLE Wykaz_Publikacji(
    IDksiazki NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IDautora NUMBER,
    IDkategorii NUMBER,
    TYTUL VARCHAR2(100),
    IDwydawcy NUMBER,
    ROK date,
    MIEJSCE VARCHAR2(40),
    IDszafki NUMBER,
    SLOWA_KLUCZOWE VARCHAR2(256),
    CONSTRAINT fk_idautora FOREIGN KEY (IDautora) REFERENCES Autorzy(IDautora),
    CONSTRAINT fk_idkategorii FOREIGN KEY (IDkategorii) REFERENCES Kategorie(IDkategorii),
    CONSTRAINT fk_idwydawcy FOREIGN KEY (IDwydawcy) REFERENCES Wykaz_Wydawcow(IDwydawcy),
    CONSTRAINT fk_idszafki FOREIGN KEY (IDszafki) REFERENCES Wykaz_Szafek(IDszafki)
);
/
CREATE TABLE Wykaz_Egzemplarzy(
    IDegzemplarza NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IDksiazki NUMBER,
    UBYTKI NUMBER DEFAULT 0,
    CONSTRAINT fk_idksiazki FOREIGN KEY (IDksiazki) REFERENCES Wykaz_Publikacji(IDksiazki) 
);
/
CREATE TABLE Czytelnicy(
    NRkarty NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAZWISKO VARCHAR2(30),
    IMIE VARCHAR2(30),
    PESEL VARCHAR(11) UNIQUE CHECK (LENGTH(PESEL) = 11),
    DataUr DATE,
    MiejsceUr VARCHAR(30),
    KOD VARCHAR(5),
    MIASTO VARCHAR(50),
    WOJEWODZTWO VARCHAR(30),
    IDwojewodztwa NUMBER,
    ULICA VARCHAR(60) CHECK (ULICA LIKE 'ul.%' OR ULICA LIKE 'Al.%' OR ULICA LIKE 'Plac%' OR ULICA LIKE 'skwer%'),
    TELEFON NUMBER,
    CONSTRAINT fk_idwojewodztwa FOREIGN KEY (IDwojewodztwa) REFERENCES Wojewodztwa(IDwojewodztwa)
);
/
CREATE TABLE Rejestr_Wypozyczen(
    NRkarty NUMBER GENERATED BY DEFAULT AS IDENTITY,
    IDegzemplarza NUMBER,
    DataWyp DATE DEFAULT SYSDATE,
    ZwrotPrzed DATE DEFAULT SYSDATE + INTERVAL '3' MONTH,
    DataZwrotu DATE,
    CONSTRAINT fk_nrkarty FOREIGN KEY (NRkarty) REFERENCES Czytelnicy (NRkarty),
    CONSTRAINT fk_idegzemplarza FOREIGN KEY (IDegzemplarza) REFERENCES Wykaz_Egzemplarzy (IDegzemplarza),
    CONSTRAINT data_chk CHECK(DataZwrotu >= DataWyp)
);
/
CREATE TABLE Autorzy_Publikacje (
    IDautora NUMBER,
    IDksiazki NUMBER,
    CONSTRAINT fk_autor FOREIGN KEY (IDautora) REFERENCES Autorzy(IDautora),
    CONSTRAINT fk_publikacja FOREIGN KEY (IDksiazki) REFERENCES Wykaz_Publikacji(IDksiazki),
    PRIMARY KEY (IDautora, IDksiazki)
);
/
CREATE OR REPLACE TRIGGER TRG_CZYTELNICY_WIEK
BEFORE INSERT OR UPDATE ON Czytelnicy
FOR EACH ROW
BEGIN
    IF :NEW.DataUr > ADD_MONTHS(SYSDATE, -12 * 12) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Czytelnik musi mie? co najmniej 12 lat.');
    END IF;
END;
/

INSERT INTO Wojewodztwa (Nazwa) VALUES ('Mazowieckie');
INSERT INTO Wojewodztwa (Nazwa) VALUES ('Ma?opolskie');
INSERT INTO Wojewodztwa (Nazwa) VALUES ('?l?skie');

/

INSERT INTO Autorzy (NAZWISKO, IMIE, UWAGI) VALUES ('Kowalski', 'Jan', 'Polski pisarz');
INSERT INTO Autorzy (NAZWISKO, IMIE, UWAGI) VALUES ('Nowak', 'Anna', 'Autorka powie?ci kryminalnych');
INSERT INTO Autorzy (NAZWISKO, IMIE, UWAGI) VALUES ('Wi?niewski', 'Piotr', 'Specjalista od literatury naukowej');

/
INSERT INTO Kategorie (KATEGORIA) VALUES ('Krymina?');
INSERT INTO Kategorie (KATEGORIA) VALUES ('Nauka');
INSERT INTO Kategorie (KATEGORIA) VALUES ('Fantastyka');
/
INSERT INTO Wykaz_Wydawcow (NAZWA) VALUES ('Wydawnictwo A');
INSERT INTO Wykaz_Wydawcow (NAZWA) VALUES ('Wydawnictwo B');
INSERT INTO Wykaz_Wydawcow (NAZWA) VALUES ('Wydawnictwo C');
/
INSERT INTO Wykaz_Szafek (POLOZENIE) VALUES ('Pi?tro 1, Sekcja A');
INSERT INTO Wykaz_Szafek (POLOZENIE) VALUES ('Pi?tro 2, Sekcja B');
INSERT INTO Wykaz_Szafek (POLOZENIE) VALUES ('Pi?tro 3, Sekcja C');
/
INSERT INTO Wykaz_Publikacji (IDautora, IDkategorii, TYTUL, IDwydawcy, ROK, MIEJSCE, IDszafki, SLOWA_KLUCZOWE)
VALUES (1, 1, 'Morderstwo w bibliotece', 1, TO_DATE('2020-01-01', 'YYYY-MM-DD'), 'Warszawa', 1, 'kryminal, biblioteka');
INSERT INTO Wykaz_Publikacji (IDautora, IDkategorii, TYTUL, IDwydawcy, ROK, MIEJSCE, IDszafki, SLOWA_KLUCZOWE)
VALUES (2, 2, 'Podstawy fizyki', 2, TO_DATE('2018-05-15', 'YYYY-MM-DD'), 'Krak?w', 2, 'fizyka, nauka');
INSERT INTO Wykaz_Publikacji (IDautora, IDkategorii, TYTUL, IDwydawcy, ROK, MIEJSCE, IDszafki, SLOWA_KLUCZOWE)
VALUES (3, 3, 'Kosmiczne podr??e', 3, TO_DATE('2021-09-10', 'YYYY-MM-DD'), 'Katowice', 3, 'kosmos, fantastyka');
/
INSERT INTO Wykaz_Egzemplarzy (IDksiazki, UBYTKI) VALUES (1, 0);
INSERT INTO Wykaz_Egzemplarzy (IDksiazki, UBYTKI) VALUES (2, 1);
INSERT INTO Wykaz_Egzemplarzy (IDksiazki, UBYTKI) VALUES (3, 2);
/
INSERT INTO Czytelnicy (NAZWISKO, IMIE, PESEL, DataUr, MiejsceUr, KOD, MIASTO, WOJEWODZTWO, IDwojewodztwa, ULICA, TELEFON)
VALUES ('Kowalska', 'Anna', '12345678901', TO_DATE('2000-05-10', 'YYYY-MM-DD'), 'Warszawa', '00001', 'Warszawa', 'Mazowieckie', 1, 'ul. G??wna 10', 123456789);
INSERT INTO Czytelnicy (NAZWISKO, IMIE, PESEL, DataUr, MiejsceUr, KOD, MIASTO, WOJEWODZTWO, IDwojewodztwa, ULICA, TELEFON)
VALUES ('Nowak', 'Jan', '98765432109', TO_DATE('1995-03-15', 'YYYY-MM-DD'), 'Krak?w', '30002', 'Krak?w', 'Ma?opolskie', 2, 'Al. Spacerowa 5', 987654321);
INSERT INTO Czytelnicy (NAZWISKO, IMIE, PESEL, DataUr, MiejsceUr, KOD, MIASTO, WOJEWODZTWO, IDwojewodztwa, ULICA, TELEFON)
VALUES ('Wi?niewski', 'Piotr', '11122233344', TO_DATE('1985-12-20', 'YYYY-MM-DD'), 'Katowice', '40003', 'Katowice', '?l?skie', 3, 'Plac Wolno?ci 12', 111222333);
/

INSERT INTO Rejestr_Wypozyczen (NRkarty, IDegzemplarza, DataWyp, ZwrotPrzed, DataZwrotu)
VALUES (1, 1, SYSDATE - 10, SYSDATE + 20, NULL);
INSERT INTO Rejestr_Wypozyczen (NRkarty, IDegzemplarza, DataWyp, ZwrotPrzed, DataZwrotu)
VALUES (2, 2, SYSDATE - 15, SYSDATE + 15, NULL);
INSERT INTO Rejestr_Wypozyczen (NRkarty, IDegzemplarza, DataWyp, ZwrotPrzed, DataZwrotu)
VALUES (3, 3, SYSDATE - 20, SYSDATE + 10, NULL);
/
INSERT INTO Autorzy_Publikacje (IDautora, IDksiazki) VALUES (1, 1);
INSERT INTO Autorzy_Publikacje (IDautora, IDksiazki) VALUES (2, 2);
INSERT INTO Autorzy_Publikacje (IDautora, IDksiazki) VALUES (3, 3);
/
CREATE OR REPLACE TYPE wypozyczenia_type AS OBJECT(
    IDksiazki NUMBER,
    DataWyp DATE,
    ZwrotPrzed DATE,
    DataZwrotu DATE,
    MEMBER FUNCTION is_wypozyczona RETURN VARCHAR2,
    MEMBER PROCEDURE set_data_zwrotu (p_data DATE)
);
/
CREATE OR REPLACE TYPE czytelnicy_type AS OBJECT(
    NRkarty NUMBER,
    NAZWISKO VARCHAR2(30),
    IMIE VARCHAR2(30),
    PESEL VARCHAR2(11),
    DataUr DATE,
    wypozyczenia wypozyczenia_type,
    MEMBER FUNCTION wiek RETURN NUMBER
);
/
CREATE OR REPLACE
TYPE BODY CZYTELNICY_TYPE AS

  MEMBER FUNCTION wiek RETURN NUMBER AS
  BEGIN
    
    RETURN TRUNC(MONTHS_BETWEEN(SYSDATE, DataUr)/12);
  END wiek;

END;
/
CREATE OR REPLACE
TYPE BODY WYPOZYCZENIA_TYPE AS

  MEMBER FUNCTION is_wypozyczona RETURN VARCHAR2 AS
  BEGIN
    IF DataZwrotu IS NULL THEN
        RETURN 'TAK';
    ELSE 
        RETURN 'NIE';
    END IF;
    
  END is_wypozyczona;

  MEMBER PROCEDURE set_data_zwrotu (p_data DATE) AS
  BEGIN
    DataZwrotu := p_data;
  END set_data_zwrotu;

END;
/
CREATE TABLE Czytelnicy_Obj OF czytelnicy_type;
/
CREATE TABLE Wypozyczenia_Obj OF wypozyczenia_type;
/
INSERT INTO Czytelnicy_obj VALUES(
    czytelnicy_type(1, 'Kowalski', 'Jan', '12345678901', TO_DATE('2000-05-10', 'YYYY-MM-DD'),
    wypozyczenia_type(101, SYSDATE - 10, SYSDATE + 20, NULL)
    )
);
/
INSERT INTO Wypozyczenia_obj VALUES(
    wypozyczenia_type(101, SYSDATE - 10, SYSDATE + 20, NULL)
);
/
SELECT w.is_wypozyczona() FROM Wypozyczenia_obj w where w.IDksiazki = 101;
/
DECLARE 
    wyp_obj wypozyczenia_type;
BEGIN
    
    SELECT VALUE(w) INTO wyp_obj FROM Wypozyczenia_obj w 
    where w.IDksiazki = 101;

    wyp_obj.set_data_zwrotu(SYSDATE);
    
    UPDATE Wypozyczenia_Obj w
    SET VALUE(w) = wyp_obj
    WHERE w.IDksiazki = 101;
END;
/
SELECT w.is_wypozyczona() FROM Wypozyczenia_obj w where w.IDksiazki = 101;
/
SELECT cz.wiek() FROM Czytelnicy_obj cz where cz.NRkarty = 1;
/